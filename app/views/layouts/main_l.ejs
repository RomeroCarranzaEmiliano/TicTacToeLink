<!DOCTYPE html>
<html>
  <head>
    <title>Tatet√≠ | online</title>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    <%/* If you want to discourage search engines from indexing this site, uncomment the following line: */%>
    <%/* <meta name="robots" content="noindex"> */%>


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->
  </head>

  <body>
    <%- body %>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like React, Vue.js, Angular, Ember, and Backbone
        require that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different view engine (handlebars, dust, pug/jade, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--
        Server-side View Locals
        ========================

        Sometimes, it's convenient to get access to your server-side view locals from
        client-side JavaScript.  This can improve page load times, remove the need for
        extra AJAX requests, and make your client-side code easier to understand and
        to maintain.  Sails provides a simple mechanism for accessing dynamic view
        locals: the "exposeLocalsToBrowser()" view partial.

        For more information on using this built-in feature, see:
        https://sailsjs.com/docs/concepts/views/locals#?escaping-untrusted-data-using-exposelocalstobrowser

    -->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/dependencies/sails.io.js"></script>
    <!--SCRIPTS END-->
    <script type='text/javascript'>
      $('#new').click(function(){
        io.socket.post('/server/create', '', function(data, data2){
          var gameID = data;
          window.location.href = "/play/"+gameID;
        });
      });


      //menus
      //=======================
      $('#main').click(function(){
        window.location.href = "/";
      });
      function openInNewTab(url) {
        var win = window.open(url, '_blank');
        win.focus();
      }
      //=======================

    </script>

    <style>

      @import url('https://fonts.googleapis.com/css?family=Plaster&display=swap');
      
      body {
        margin-left: 0px;
        margin-right: 0px;
        margin-top: 0px;
        margin-bottom: 0px;
        background-color: black;
      }

      #logo {

        font-family: 'Plaster', cursive;

        color: #C9C0BB;

        text-shadow: 2px 2px black;

        top: 5%;
        left: 2%;

        z-index: 2;
        position: fixed;

      }

      #banner5 {
        width: 100%; height: 4%;
        background-color: #33001a;

        position: fixed;

        top: 0px;
      }
      #banner4 {
        width: 100%; height: 4%;
        background-color: #4d0000;

        position: fixed;

        top: 4%;
      }
      #banner3 {
        width: 100%; height: 4%;
        background-color: #990000;

        position: fixed;

        top: 8%;
      }
      #banner2 {
        width: 100%; height: 4%;
        background-color: #b32400;

        position: fixed;

        top: 12%;
      }
      #banner1 {
        width: 100%; height: 4%;
        background-color: #ffbb33;

        position: fixed;

        top: 16%;
      }

      #main {
        position: fixed;
        color: white;
        bottom: 2%;
        left: 2%;
        background-color: transparent;
        border: none;
        border-bottom: 2px solid transparent;
        transition-duration: 0.4s;

      }
      #main:hover {
        border-bottom: 2px solid white;
      }

      #about {
        position: fixed;
        color: white;
        bottom: 2%;
        left: 8%;
        background-color: transparent;
        border: none;
        border-bottom: 2px solid transparent;
        transition-duration: 0.4s;

      }
      #about:hover {
        border-bottom: 2px solid white;
      }

      #by {
        position: fixed;
        color: white;
        bottom: 2%;
        right: 2%;
        background-color: transparent;
        border: none;
        border-bottom: 2px solid transparent;
        transition-duration: 0.4s;

      }
      #by:hover {
        border-bottom: 2px solid white;
      }

      .btn {
        padding: 0.5%;
      }

      /*UNIQUE CSS FOR THIS PAGE*/
      /*===========================================*/

      #new {
        position: fixed;
        color: white;
        top: 50%;
        left: 42%;
        background-color: transparent;
        border: none;
        border-bottom: 2px solid transparent;
        transition-duration: 0.4s;

      }
      #new:hover {
        border-bottom: 2px solid white;
      }

      /*===========================================*/


    </style>

  </body>
</html>
